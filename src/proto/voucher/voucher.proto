syntax = "proto3";

import "auth/user_token.proto";

package voucher;

service VoucherService {
    rpc CreateVoucher (CreateVoucherRequest) returns (CreateVoucherResponse); 
    rpc EditVoucher (EditVoucherRequest) returns (EditVoucherResponse);
    rpc DeleteVoucher (DeleteVoucherRequest) returns (DeleteVoucherResponse);
    rpc FindAllVouchers (FindAllVouchersRequest) returns (FindAllVouchersResponse);
    rpc FindOneVoucher (FindOneVoucherRequest) returns (FindOneVoucherResponse);
    rpc FindAllVouchersByTenant(FindAllVouchersByTenantRequest) returns (FindAllVouchersResponse);
}

message CreateVoucherRequest {
    userToken.User user = 1;
    string service_id = 2;
    string voucher_name = 3;
    string voucher_code = 4;
    float max_discount = 5;
    float min_app_value = 6;
    float discount_percent = 7;
    string expire_at = 8; // Should be formatted as per DateTime format in your application
    optional string start_at = 9; 
}

message Voucher{
    string id = 1;
    string type = 2;
    string service_id = 3;
    string voucher_name = 4;
    string voucher_code = 5;
    float max_discount = 6;
    float min_app_value = 7;
    float discount_percent = 8;
    string expire_at = 9;
    string created_at = 10;
    // bool is_voucher_valid = 11;
    string start_at = 11;
    string deleted_at = 12;
}

message CreateVoucherResponse {
    string id = 1; // Voucher ID generated by the system
}

message EditVoucherRequest {
    userToken.User user = 1;
    string id = 2; // ID of the voucher to be edited
    optional string voucher_name = 3; // Updated voucher name (optional)
    optional string voucher_code = 4; // Updated voucher code (optional)
    optional float max_discount = 5; // Updated max discount value (optional)
    optional float min_app_value = 6; // Updated min app value (optional)
    optional float discount_percent = 7; // Updated discount percent (optional)
    optional string expire_at = 8; // Updated expiry time (optional)
    optional string start_at = 9; // Updated expiry time (optional)
}

message EditVoucherResponse {
    string result = 1; // Success or error message
}

message DeleteVoucherRequest {
    userToken.User user = 1;
    string id = 2; // ID of the voucher to be deleted
}

message DeleteVoucherResponse {
    string result = 1; // Success or error message
}

message FindAllVouchersRequest {
    userToken.User user = 1;
    string service = 2;
}

message FindAllVouchersResponse {
    repeated Voucher vouchers = 1; // List of vouchers
}

message FindOneVoucherRequest {
    userToken.User user = 1;
    string id = 2; // ID of the voucher to be found
}

message FindOneVoucherResponse {
    Voucher voucher = 1; // Found voucher
}

message FindAllVouchersByTenantRequest{
    userToken.User user = 1; 
}